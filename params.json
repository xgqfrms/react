{
  "name": "React",
  "tagline": "React",
  "body": "# React tutorial \r\n\r\n## 通过 npm 使用 React\r\n\r\n>CommonJS 模块系统: \r\n建议在 React 中使用 CommonJS 模块系统，比如 browserify 或 webpack\r\n### 安装全局包\r\n```js\r\n$ npm install babel -g\r\n$ npm install webpack -g\r\n$ npm install webpack-dev-server -g\r\n``` \r\n\r\n### step0: 根目录下, **创建文件** src/*  => /builds/development/* && /builds/production/*\r\n\r\n#### 使用*通配符\r\n> 编译所有sass/\\*.scss到css/目录\r\n> 编译所有js/ts/isx/\\*.js/\\*.ts/\\*.jsx到js/目录\r\n> 编译所有template/\\*.jade到html/目录\r\n\r\n```sh\r\n./src/js/main.js (./src/ts/main.ts)  \r\n./src/js/app.jsx (./src/jsx/app.jsx)  \r\n./src/sass/common.scss (./src/sass/no-need/var.scss 不需要编译到css目录，使用*通配符)\r\n./src/template/index.jade  \r\n``` \r\n\r\n### output\r\n```code\r\n./builds/development/js/main.js  \r\n./builds/development/js/app.js   \r\n./builds/development/css/common.css  \r\n./builds/development/index.html  \r\n``` \r\n### step1: 根目录下, npm init 初始化，生成 **package.json** 文件：\r\n\r\n```sh\r\n$ npm init\r\n``` \r\ntemplate-demo\r\n```code\r\nname: (React App) @xgqfrms/react\r\nprivate: true \r\n### private  设为true这个包将不会发布到NPM平台下。\r\n{\r\n\tversion: (1.0.0) \r\n\tdescription: react app test\r\n\tentry point: (main.js)\r\n\thomepage: https://xgqfrms.github.io/react\r\n\tauthor: {  \r\n\t  \"name\": \"xgqfrms\",\r\n\t  \"email\": \"xgqfrms@email.xyz\",\r\n\t  \"url\": \"http://www.xgqfrms.xyz\"\r\n\t}\r\n\tauthor: \"<xgqfrms@email.xyz> (http://www.xgqfrms.xyz)\"  \r\n\tbugs: {  \r\n\t  \"url\": \"https://github.com/xgqfrms/react/issues\",\r\n\t  \"email\": \"xgqfrms@email.xyz\"\r\n\t}\r\n\tcontributors, maintainers\r\n\tfiles\r\n\t\"engines\": {\r\n\t  \"node\": \">=0.10.3 < 0.12\",\r\n\t  \"npm\": \"~1.0.20\"\r\n\t}\r\n\t\"os\": [ \"darwin\", \"linux\", \"!win32\" ]\r\n\t\"cpu\": [ \"x64\", \"!arm\" ]\r\n\tmain : main.js\r\n\tdirectories\r\n\t\"repository\": {\r\n\t  \"type\": \"git\",\r\n\t  \"url\": \"http://github.com/xgqfrms/react.git\"\r\n\t}\r\n\tscripts\r\n\t\"name\": \"foo\",\r\n\t\"config\": {\r\n\t  \"port\": \"8080\"\r\n\t}\r\n}\r\n### 修改设置： npm config set foo:port 8001 \r\n\r\n{\r\n\tversion 严格匹配某个版本\r\n\t>version 必须大于某个版本\r\n\t>=version 必须大于等于某个版本\r\n\t<version 必须小于某个版本\r\n\t<=version 必须小于等于某个版本\r\n\t~version 大概匹配某个版本\r\n\t^version 兼容某个版本(**默认值**)\r\n\t1.2.x 可以是1.2.0, 1.2.1等等\r\n\thttp://... 指定tarball的url地址\r\n\t* 任何版本都可以\r\n\t\"\" 任何版本都可以\r\n\tversion1 - version2  大于等于version1 &&小于等于version2\r\n\trange1 || range2 满足range1 或range2\r\n\tgit://... git地址\r\n\tuser/repo git地址\r\n\ttag 指定某个tag的版本\r\n\tpath/path 本地包所有文件夹\r\n\t{ \"dependencies\" :\r\n\t  { \"foo\" : \"1.0.0 - 2.9999.9999\"\r\n\t  , \"bar\" : \">=1.0.2 <2.1.2\"\r\n\t  , \"baz\" : \">1.0.2 <=2.3.4\"\r\n\t  , \"boo\" : \"2.0.1\"\r\n\t  , \"qux\" : \"<1.0.0 || >=2.3.1 <2.4.5 || >=2.5.2 <3.0.0\"\r\n\t  , \"asd\" : \"http://asdf.com/asdf.tar.gz\"\r\n\t  , \"til\" : \"~1.2\"\r\n\t  , \"elf\" : \"~1.2.3\"\r\n\t  , \"two\" : \"2.x\"\r\n\t  , \"thr\" : \"3.3.x\"\r\n\t  , \"lat\" : \"latest\"\r\n\t  , \"dyl\" : \"file:../dyl\"\r\n\t  }\r\n\t}  \r\n\r\n\tgit://github.com/user/project.git#commit-ish  \r\n\tgit+ssh://user@hostname:project.git#commit-ish  \r\n\tgit+ssh://user@hostname/project.git#commit-ish  \r\n\tgit+http://user@hostname/project/blah.git#commit-ish  \r\n\tgit+https://user@hostname/project/blah.git#commit-ish  \r\n}\r\n\r\n### NPM的一些**默认值**说明 \r\n\"scripts\": { \"start\": \"node server.js\" } 如果在项目根目录下含有server.js文件，则NPM会自动设置此值。\r\nkeywords: react, xgqfrms, webgeeker\r\nauthor: xgqfrms\r\nlicense: (MIT) \r\n```` \r\n\r\n\r\n### step2: 安装 依赖包 react react-dom \r\n\r\n**--save** 命令用于将依赖包添加到package.json的**“dependencies”**中.\r\n**--save-dev** 命令用于将依赖包添加到package.json的**“devDependencies”**中.\r\n\r\n```sh\r\n$ npm install --save react react-dom\r\n``` \r\n等于同 ===\r\n```sh\r\n$ npm install --save react\r\n$ npm install --save react-dom\r\n``` \r\n>react.min.js - React 的核心库\r\nreact-dom.min.js - 提供与 DOM 相关的功能\r\nbrowser.min.js - 用于将 JSX 语法转为 JavaScript 语法\r\n\r\n\r\n### step3: 安装 插件 \r\n**--save** 命令用于将依赖包添加到package.json的**“dependencies”**中.\r\n**--save-dev** 命令用于将依赖包添加到package.json的**“devDependencies”**中.\r\n\r\n```sh\r\n$ npm install --save babel-core babel-loader babel-preset-react babel-preset-es2015\r\n``` \r\n```sh\r\n$ npm install --save babel-core\r\n$ npm install --save babel-loader\r\n$ npm install --save babel-preset-react\r\n$ npm install --save babel-preset-es2015\r\n``` \r\n\r\n\r\n\r\n### step4: 创建文件 webpack.config.js || gulpfile.js \r\n\r\n> \r\n| 参数 | 作用解释 |\r\n|:-----------|:------------|\r\n| entry:     | 指定打包的入口文件 main.js。| \r\n| output：   | 配置打包结果，path定义了输出的文件夹，filename则定义了打包结果文件的名称。| \r\n| devServer：| 设置服务器端口号为 7777，端口后你可以自己设定 。| \r\n| module：   | 定义了对模块的处理逻辑，这里可以用loaders定义了一系列的加载器，以及一些正则。当需要加载的文件匹配test的正则时，就会调用后面的loader对文件进行处理，这正是webpack强大的原因。| \r\n\r\n### path ??? ./src/js/\\*.js, ./src/jsx/\\*.jsx, ./src/ts/*.ts\r\n```js\r\nvar config = {\r\n   entry: './src/js/main.js',\t\r\n   output: {\r\n      path:'./builds/development/js/',\r\n      filename: 'main.js',\r\n   },\r\n   devServer: {\r\n      inline: true,\r\n      port: 7777\r\n   },\t\r\n   module: {\r\n      loaders: [ {\r\n         test: /\\.jsx?$/,\r\n         exclude: /node_modules/,\r\n         loader: 'babel',\t\r\n         query: {\r\n            presets: ['es2015', 'react']\r\n         }\r\n      }]\r\n   }\t\r\n}\r\nmodule.exports = config;\r\n\r\n``` \r\n\r\n\r\n\r\n### step5: 编辑 package.json 文件\r\n\r\n```js\r\n\"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\r\n  },\r\n``` \r\n\r\n```js\r\n\"scripts\": {\r\n\t\"start\": \"webpack-dev-server --hot\"\r\n  },\r\n``` \r\n\r\n**--hot**命令会在文件变化后重新载入，就不需要在代码修改后重新刷新浏览器就能看到变化\r\n\r\n### step6: npm start 命令来启动服务。\r\n\r\n\r\n```sh\r\n$ npm start\r\n``` \r\n\r\n\r\n### step7: 编辑 index.jade\r\n\r\n```jade\r\ndoctype html\r\nhtml(lang=\"en\")\r\n\thead\r\n\t\tmeta(charset=\"UTF-8\")\r\n\t\tmeta(http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\")\r\n\t\tmeta(name=\"viewport\" content=\"width=device-width, initial-scale=1,user-scalable=no\")\r\n\t\tlink(rel=\"\" href=\"\")\r\n\t\ttitle React Project\r\n\tbody\r\n\t\theader\r\n\t\t\th1 React && React native \r\n\t\t\tnav\r\n\t\t\t\tul\r\n\t\t\t\t\tli\r\n\t\t\t\t\t//emmet li*3 ??? for/each\r\n\t\tmain\r\n\t\t\tsection\r\n\t\t\t\tdiv.app\r\n\t\t\t\t// .app\r\n\t\t\t\t//- react enter port\r\n\t\taside\r\n\t\t\tul\r\n\t\t\t\tli\r\n\t\tfooter\r\n\t\t\tdiv\r\n\t\t\t\tspan(copyright @ xgqfrms 2016)\r\n\t\tscript(src=\"./js/main.js\")\r\n\t\t//- /builds/development/index.html\r\n\t\t//- /builds/production/js/main.js\r\n\t\t//- /builds/production/js/app.js\r\n\r\n``` \r\n\r\n\r\n### step8: 编辑 main.js\r\n\r\n```js\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './app.jsx';\r\n\r\n/*\r\n\t./src/js/main.js \r\n\t./src/js/app.jsx\r\n\r\n\timport App from '../jsx/app.jsx';\r\n\t(./src/jsx/app.jsx)  \r\n*/\r\n\r\nReactDOM.render(<App />, document.getElementById('app'))\r\n``` \r\n### 注意：\r\n>如果想要组件可以在任何的应用中使用，需要在创建组件后,\r\n使用 **export** 将其导出，\r\n在使用组件的文件使用 **import**将其导入。\r\n\r\n\r\n### step9: 编辑 app.jsx\r\n\r\n```jsx\r\nimport React from 'react';\r\n\r\nclass App extends React.Component {\r\n   render() {\r\n      return (\r\n         <div>\r\n            Hello World!<br />\r\n            欢迎来到<mark>React</mark>教程学习!\r\n         </div>\r\n         // jade ???\r\n      );\r\n   }\r\n}\r\n\r\nexport default App;\r\n// 我们需要引入组件并将其渲染到根元素 App 上，这样我们才可以在浏览器上看到它。\r\n``` \r\n### 注意：\r\n>如果想要组件可以在任何的应用中使用，需要在创建组件后,\r\n使用 **export** 将其导出，\r\n在使用组件的文件使用 **import**将其导入。\r\n\r\n\r\n### step10: 安装 gulp gulp-jade\r\n**--save** 命令用于将依赖包添加到package.json的**“dependencies”**中.\r\n**--save-dev** 命令用于将依赖包添加到package.json的**“devDependencies”**中.\r\n\r\n```sh\r\n$ npm install --save-dev gulp gulp-jade \r\n``` \r\n### 编辑 gulpfile.js (使用*通配符)\r\n\r\n```js\r\nvar\tgulp = require('gulp'),\r\n\tjade = require('gulp-jade');\r\n\t\t\r\n\tgulp.task('jade',function(){\r\n\t\treturn gulp.src('src/template/**/*.jade')\r\n\t\t\t.pipe(jade())\r\n\t\t\t.pipe(gulp.dest('builds/development'));\r\n\t});\r\n``` \r\n### CMD 运行 gulp jade\r\n```sh\r\n$ gulp jade\r\n``` \r\n\r\n```html\r\n\t<!DOCTYPE html>\r\n\t<html lang=\"en\">\r\n\t<head>\r\n\t<meta charset=\"UTF-8\">\r\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\r\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1,user-scalable=no\">\r\n\t<link rel=\"\" href=\"\">\r\n\t<title>React Project</title>\r\n\t</head>\r\n\t<body>\r\n\t<header>\r\n\t<h1>React && React native </h1>\r\n\t<nav>\r\n\t<ul>\r\n\t<li></li>\r\n\t<!--emmet li*3 ??? for/each-->\r\n\t</ul>\r\n\t</nav>\r\n\t</header>\r\n\t<main>\r\n\t<section>\r\n\t<div class=\"app\"></div>\r\n\t<!-- .app-->\r\n\t</section>\r\n\t</main>\r\n\t<aside><ul><li></li></ul></aside>\r\n\t<footer>\r\n\t<div>\r\n\t<span copyright @ xgqfrms 2016></span>\r\n\t</div>\r\n\t</footer>\r\n\t<script src=\"./js/main.js\"></script>\r\n\t</body>\r\n\t</html>\r\n``` \r\n\r\n### step11: 安装 npm install --save-dev gulp-browserify\r\n**--save** 命令用于将依赖包添加到package.json的**“dependencies”**中.\r\n**--save-dev** 命令用于将依赖包添加到package.json的**“devDependencies”**中.\r\n\r\n```sh\r\nnpm install --save-dev gulp-browserify\r\n```  \r\n### 编辑 gulpfile.js (使用*通配符)\r\n```js\r\nbrowserify = require('gulp-browserify');\r\n\r\ngulp.task('js',function(){\r\n\t\treturn gulp.src('src/js/*.js')\r\n\t\t\t.pipe(browserify({ debug: true}))\r\n\t\t\t.pipe(gulp.dest('builds/development/js'));\r\n\t});\r\n``` \r\n\r\n### CMD 运行 gulp js\r\n```sh\r\n$ gulp js\r\n``` \r\n\r\n## new: CMD 安装 npm install --save-dev requirejs  **???????? error?????**\r\n```sh\r\n\t$ npm install --save-dev requirejs\r\n``` \r\n### [how-to-include-a-javascript-file-in-another-javascript-file](http://stackoverflow.com/questions/950087/how-to-include-a-javascript-file-in-another-javascript-file/39854041#39854041)\r\n\r\n### [REQUIREJS IN NODE](http://requirejs.org/docs/node.html#3)  \r\nsub.js (module.exports)\r\n```js\r\nmodule.exports = {\r\n  log: function(string) {\r\n    if(console) console.log(string);\r\n  }\r\n  mylog: function(){\r\n    console.log('just for log test!');\r\n  }\r\n}\r\n``` \r\nmain.js (Usage)\r\n```sh\r\nvar mylog =require('./sub');\r\n\r\nmylog.log('Hurray, it works! :)');\r\nmylog.mylog();\r\n``` \r\n\r\n\r\n### step12: 安装 gulp-uglify\r\n```sh\r\n$ npm install --save-dev gulp-uglify\r\n``` \r\n\r\n### 编辑 gulpfile.js (使用*通配符)\r\n```sh\r\nuglify= require('gulp-uglify');\r\n\r\ngulp.task('js',function(){\r\n\t\treturn gulp.src('src/js/*.js')\r\n\t\t\t.pipe(browserify({ debug: true}))\r\n\t\t\t.pipe(uglify())\r\n\t\t\t.pipe(gulp.dest('builds/development/js'));\r\n\t});\r\n``` \r\n\r\n### CMD 运行 gulp js\r\n```sh\r\n$ gulp js\r\n``` \r\n\r\n### step13: 安装 gulp-if  (使用*通配符)\r\n\r\n```sh\r\n$ npm install --save-dev **gulp-if**\r\n``` \r\n### 编辑 gulpfile.js\r\n```sh\r\ngulpif= require('gulp-if');\r\n\r\nvar env = process.env.NODE_ENV;\r\n\r\ngulp.task('js',function(){\r\n\t\treturn gulp.src('src/js/*.js')\r\n\t\t\t.pipe(browserify({ debug: env === 'development'}))\r\n\t\t\t.pipe(gulpif(env === 'production', uglify()))\r\n\t\t\t.pipe(gulp.dest('builds/development/js'));\r\n\t});\r\n``` \r\n\r\n### CMD 运行 set NODE_ENV=development && gulp js \r\nPS:(使用开发调试模式)\r\n```sh\r\n$ set NODE_ENV=development \r\n$ gulp js\r\n``` \r\n\r\n### CMD 运行 set NODE_ENV=production && gulp js \r\nPS:(使用产品发布模式)\r\n```sh\r\n$ set NODE_ENV=production \r\n$ gulp js\r\n``` \r\n\r\n### 14. 手动编辑 gulpfile.js PS:(手动：开启默认的模式)\r\n```js\r\n\t// var env = process.env.NODE_ENV || 'production';\r\n\tvar env = process.env.NODE_ENV || 'development';\r\n``` \r\n\r\n## 15. 安装  gulp-sass (使用*通配符)\r\n```sh\r\n$ npm install --save-dev gulp-sass  \r\n``` \r\n\r\n### 编辑 gulpfile.js\r\n```sh\r\nsass= require('gulp-sass');\r\n\r\ngulp.task('sass',function(){\r\n\treturn gulp.src('src/sass/*.scss')\r\n\t\t.pipe(sass({ sourceComments: 'map'}))\r\n\t\t.pipe(gulp.dest('builds/development/css'));\r\n});\r\n``` \r\n\r\n### CMD 运行 gulp sass\r\n```sh\r\n$ gulp sass\r\n``` \r\n\r\n**path 变量**  +  **if (env === 'development')**\r\n## 16. 编辑 gulpfile.js \r\n```javascript\r\n\tvar outputDir = 'builds/development';\r\n\t//使用 path 变量，代替 path names\r\n\t.pipe(gulp.dest(outputDir));\r\n\t// .pipe(gulp.dest('builds/development'));\r\n\t.pipe(gulp.dest(outputDir + '/js'));\r\n\t// .pipe(gulp.dest('builds/development/js'));\r\n\t.pipe(gulp.dest(outputDir + '/css'));\r\n    // .pipe(gulp.dest('builds/development/css'));\r\n``` \r\n```javascript\r\n\tgulp.task('sass',function(){\r\n\t\tvar config = {};\r\n\t\tif (env === 'development') {\r\n\t\t\tconfig.sourceComments = 'map';\r\n\t\t} \r\n\t\tif(env === 'production'){\r\n\t\t\tconfig.outputStyle = 'compressed';\r\n\t\t}\r\n\t\treturn gulp.src('src/sass/main.scss')\r\n\t\t\t// .pipe(sass({ sourceComments: 'map'}))\r\n\t\t\t.pipe(sass(config))\r\n\t\t\t.pipe(gulp.dest(outputDir + '/css'));\r\n\t\t\t// .pipe(gulp.dest('builds/development/css'));\r\n\t});\r\n``` \r\n## CMD 运行 set NODE_ENV=development && gulp sass PS:(使用开发调试模式)\r\n```sh\r\n\t$ set NODE_ENV=development \r\n\t$ gulp sass\r\n``` \r\n\r\n## CMD 运行 set NODE_ENV=production && gulp sass PS:(使用产品发布模式)\r\n```sh\r\n\t$ set NODE_ENV=production \r\n\t$ gulp sass\r\n``` \r\n\r\n\r\n## 17. 编辑 gulpfile.js  使用 gulp watch (使用*通配符)\r\nPS:(使用 watch 自动监测变化)\r\n```javascript\r\n\tgulp.task('watch',function(){\r\n\t\tgulp.watch('src/template/**/*.jade',['jade']);\r\n\t\tgulp.watch('src/js/**/*.js',['js']);\r\n\t\tgulp.watch('src/sass/**/*.scss',['sass']);\r\n\t});\r\n``` \r\n\r\n## CMD 运行 gulp watch \r\nPS:(使用 watch 自动监测变化)\r\n```sh\r\n\t$ gulp watch\r\n``` \r\n\r\n## 编辑 gulpfile.js  使用 gulp.task default模式\r\nPS:(使用default模式,指定 tasks)\r\n```javascript\r\n\tgulp.task('default',['js','sass','jade','watch']);\r\n\t/*\r\n\t\tfunction(){\r\n\t\t\tgulp.watch('src/template/**/*.jade',['jade']);\r\n\t\t}\r\n\t\t=== ???\r\n\t\t['jade']\r\n\t*/\r\n``` \r\n\r\n## CMD 运行 gulp \r\nPS:(使用default模式,指定 tasks)\r\n```sh\r\n\t$ gulp\r\n``` \r\n## Ctrl + C (退出 watch / default 模式)\r\n\r\n\r\n## 18. 安装  gulp-connect \r\nPS:(自动启动Web Server,打开browser,可以配置端口)???\r\n```sh\r\n$ npm install --save-dev gulp-connect \r\n``` \r\n\r\n### 编辑 gulpfile.js\r\n\r\n```js\r\nconnect= require('gulp-connect');\r\n\r\ngulp.task('connect',connect.server({\r\n\troot: [outputDir],\r\n\topen: { browser: 'Google Chrome'}\r\n}));\r\n\r\ngulp.task('default',['js','sass','jade','watch','connect']);\r\n``` \r\n\r\n### CMD 运行 gulp (使用default模式,指定 all-tasks)\r\n```sh\r\n$ gulp\r\n``` \r\n\r\n\r\n## 编辑 gulpfile.js  \r\nPS:(自动刷新 .pipe(connect.reload());)\r\n\r\n```js\r\n//每个task后，都后面追加上\r\n.pipe(connect.reload());\r\n\r\n.pipe(connect.reload());\r\n\r\n.pipe(connect.reload());\r\n``` \r\n\r\n##  CMD 运行 gulp \r\n```sh\r\n\t$ gulp\r\n``` \r\n\r\n## ???. some errors\r\n[here some errors, what's wrong with this? #202](https://github.com/AveVlad/gulp-connect/issues/202)  \r\n\r\n[Get started with gulp Part 6: LiveReload and web server](https://www.youtube.com/watch?v=KURMrW-HsY4&index=7&list=PLRk95HPmOM6PN-G1xyKj9q6ap_dc9Yckm)  \r\n\r\n[/images/errors/](https://github.com/xgqfrms/AngularJS/tree/gh-pages/images/errors)\r\n[gulp-test](https://github.com/xgqfrms/AngularJS/tree/gh-pages/gulp-test)  \r\n\r\n```javascript\r\n\t/*\r\n\tgulp.task('connect',connect.server({\r\n\t\troot: [outputDir],\r\n\t\topen: { browser: 'Google Chrome'}\r\n\t}));\r\n\t*/\r\n\t//https://github.com/AveVlad/gulp-connect\r\n\r\n\tgulp.task('connect',function(){\r\n\t\tconnect.server({\r\n\t\t\troot: [outputDir],\r\n\t\t\tport: 8080,\r\n\t\t    livereload: true,\r\n\t\t\t// open: { browser: 'Google Chrome'}\r\n\t\t});\r\n\t});\r\n``` \r\n\r\n\r\n\r\n\r\n\r\n## bugs fixed ?\r\n\r\n### 编辑 gulpfile.js \r\n\r\n'''javascript\r\n\tvar env = process.env.NODE_ENV;\r\n'''\r\n\r\n> ## CMD: 手动 传入参数 \r\nset NODE_ENV=development\r\nset NODE_ENV=production\r\n\r\n'''bash\r\n\t$ set NODE_ENV=development\r\n\t$ gulp\r\n'''\r\n'''bash\r\n\t$ set NODE_ENV=production\r\n\t$ gulp\r\n'''\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n???\r\n### why it doesn't work by using \r\n// var env = process.env.NODE_ENV || 'production';\r\n// var env = process.env.NODE_ENV || 'development';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}